{
  "Comment": "Agentic Local SEO Content Factory - Simplified end-to-end content generation pipeline",
  "StartAt": "IngestRawData",
  "States": {
    "IngestRawData": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${IngestRawFunctionArn}",
        "Payload.$": "$"
      },
      "ResultSelector": {
        "execution_id.$": "$.Payload.execution_id",
        "output_file.$": "$.Payload.output_file",
        "total_rows.$": "$.Payload.total_rows",
        "valid_businesses.$": "$.Payload.valid_businesses"
      },
      "ResultPath": "$.ingest_result",
      "Next": "CleanTransformData",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError",
          "ResultPath": "$.error"
        }
      ]
    },
    "CleanTransformData": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${CleanTransformFunctionArn}",
        "Payload": {
          "execution_id.$": "$.ingest_result.execution_id",
          "output_file.$": "$.ingest_result.output_file",
          "source_file.$": "$.file_key"
        }
      },
      "ResultSelector": {
        "execution_id.$": "$.Payload.execution_id",
        "output_file.$": "$.Payload.output_file",
        "total_rows.$": "$.Payload.total_rows"
      },
      "ResultPath": "$.transform_result",
      "Next": "GenerateContent",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError",
          "ResultPath": "$.error"
        }
      ]
    },
    "GenerateContent": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${AgentGenerateFunctionArn}",
        "Payload": {
          "execution_id.$": "$.transform_result.execution_id",
          "output_file.$": "$.transform_result.output_file"
        }
      },
      "ResultSelector": {
        "execution_id.$": "$.Payload.execution_id",
        "output_file.$": "$.Payload.output_file",
        "successful_generations.$": "$.Payload.successful_generations",
        "failed_generations.$": "$.Payload.failed_generations"
      },
      "ResultPath": "$.generate_result",
      "Next": "CheckGenerationSuccess",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError",
          "ResultPath": "$.error"
        }
      ]
    },
    "CheckGenerationSuccess": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.generate_result.successful_generations",
          "NumericEquals": 0,
          "Next": "HandleError"
        }
      ],
      "Default": "QualityCheck"
    },
    "QualityCheck": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${AgentQcFunctionArn}",
        "Payload": {
          "execution_id.$": "$.generate_result.execution_id",
          "output_file.$": "$.generate_result.output_file"
        }
      },
      "ResultSelector": {
        "execution_id.$": "$.Payload.execution_id",
        "output_file.$": "$.Payload.output_file",
        "successful_qc.$": "$.Payload.successful_qc",
        "failed_qc.$": "$.Payload.failed_qc"
      },
      "ResultPath": "$.qc_result",
      "Next": "RenderHTML",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError",
          "ResultPath": "$.error"
        }
      ]
    },
    "RenderHTML": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${RenderHtmlFunctionArn}",
        "Payload": {
          "execution_id.$": "$.qc_result.execution_id",
          "output_file.$": "$.qc_result.output_file"
        }
      },
      "ResultSelector": {
        "execution_id.$": "$.Payload.execution_id",
        "output_file.$": "$.Payload.output_file",
        "successful_renders.$": "$.Payload.successful_renders",
        "failed_renders.$": "$.Payload.failed_renders"
      },
      "ResultPath": "$.render_result",
      "Next": "PublishSite",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError",
          "ResultPath": "$.error"
        }
      ]
    },
    "PublishSite": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${PublishSiteFunctionArn}",
        "Payload": {
          "execution_id.$": "$.render_result.execution_id",
          "output_file.$": "$.render_result.output_file"
        }
      },
      "ResultSelector": {
        "execution_id.$": "$.Payload.execution_id",
        "website_url.$": "$.Payload.website_url",
        "successful_renders.$": "$.Payload.successful_renders",
        "failed_renders.$": "$.Payload.failed_renders",
        "execution_report_file.$": "$.Payload.execution_report_file"
      },
      "ResultPath": "$.publish_result",
      "Next": "Success",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError",
          "ResultPath": "$.error"
        }
      ]
    },
    "Success": {
      "Type": "Succeed",
      "Comment": "Content generation pipeline completed successfully"
    },
    "HandleError": {
      "Type": "Fail",
      "Cause": "Pipeline execution failed",
      "Error": "PipelineError"
    }
  }
}