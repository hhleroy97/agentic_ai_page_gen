{
  "Comment": "Agentic Local SEO Content Factory - End-to-end content generation pipeline",
  "StartAt": "IngestRawData",
  "States": {
    "IngestRawData": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${IngestRawFunctionArn}",
        "Payload.$": "$"
      },
      "ResultPath": "$.ingest_result",
      "Next": "CleanTransformData",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError",
          "ResultPath": "$.error"
        }
      ]
    },
    "CleanTransformData": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${CleanTransformFunctionArn}",
        "Payload.$": "$"
      },
      "ResultPath": "$.transform_result",
      "Next": "ProcessBusinessesBatch",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError",
          "ResultPath": "$.error"
        }
      ]
    },
    "ProcessBusinessesBatch": {
      "Type": "Map",
      "ItemsPath": "$.transform_result.Payload.businesses",
      "MaxConcurrency": 5,
      "Iterator": {
        "StartAt": "GeneratePageContent",
        "States": {
          "GeneratePageContent": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${AgentGenerateFunctionArn}",
              "Payload.$": "$"
            },
            "ResultPath": "$.generate_result",
            "Next": "QualityCheckContent",
            "Retry": [
              {
                "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                "IntervalSeconds": 2,
                "MaxAttempts": 3,
                "BackoffRate": 2.0
              }
            ]
          },
          "QualityCheckContent": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${AgentQcFunctionArn}",
              "Payload.$": "$"
            },
            "ResultPath": "$.qc_result",
            "Next": "CheckQualityScore",
            "Retry": [
              {
                "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                "IntervalSeconds": 2,
                "MaxAttempts": 3,
                "BackoffRate": 2.0
              }
            ]
          },
          "CheckQualityScore": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.qc_result.Payload.quality_score",
                "NumericGreaterThanEquals": 0.8,
                "Next": "ContentApproved"
              },
              {
                "Variable": "$.qc_result.Payload.retry_count",
                "NumericGreaterThanEquals": 3,
                "Next": "ContentApproved"
              }
            ],
            "Default": "RegenerateContent"
          },
          "RegenerateContent": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${AgentGenerateFunctionArn}",
              "Payload": {
                "business.$": "$.business",
                "feedback.$": "$.qc_result.Payload.feedback",
                "retry_count.$": "$.qc_result.Payload.retry_count"
              }
            },
            "ResultPath": "$.generate_result",
            "Next": "QualityCheckContent"
          },
          "ContentApproved": {
            "Type": "Pass",
            "End": true
          }
        }
      },
      "ResultPath": "$.processed_businesses",
      "Next": "RenderAllPages"
    },
    "RenderAllPages": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${RenderHtmlFunctionArn}",
        "Payload.$": "$"
      },
      "ResultPath": "$.render_result",
      "Next": "PublishWebsite",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError",
          "ResultPath": "$.error"
        }
      ]
    },
    "PublishWebsite": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${PublishSiteFunctionArn}",
        "Payload.$": "$"
      },
      "ResultPath": "$.publish_result",
      "Next": "Success",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "HandleError",
          "ResultPath": "$.error"
        }
      ]
    },
    "Success": {
      "Type": "Succeed",
      "Comment": "Content generation pipeline completed successfully"
    },
    "HandleError": {
      "Type": "Fail",
      "Cause": "Pipeline execution failed",
      "Error": "PipelineError"
    }
  }
}